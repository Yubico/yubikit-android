/*
 * Copyright (C) 2025 Yubico.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Custom task to notify Sonatype Central that the manual upload is complete.
tasks.register('finalizeCentralPublication') {
    description = 'Notifies Sonatype Central that a manual publication is complete.'
    group = 'publishing'

    doLast {

        // Retrieve credentials securely from gradle.properties or environment variables.
        def sonatypeNamespace = 'com.yubico'
        def sonatypeUserName = findProperty('sonatype.username')
        def sonatypePassword = findProperty('sonatype.password')
        def sonatypeBearerToken = "${sonatypeUserName}:${sonatypePassword}".bytes.encodeBase64().toString()

        // Construct the API endpoint URL.
        def url = new URI("https://ossrh-staging-api.central.sonatype.com/manual/upload/defaultRepository/${sonatypeNamespace}").toURL()

        logger.lifecycle("Finalizing publication by sending POST to ${url}")

        // Open a connection and configure the POST request.
        def connection = url.openConnection() as HttpURLConnection
        connection.requestMethod = 'POST'
        connection.setRequestProperty('Authorization', "Bearer ${sonatypeBearerToken}")
        connection.setRequestProperty('User-Agent', "Gradle/${project.gradle.gradleVersion}")
        connection.doOutput = true // Necessary for a POST request.

        def responseCode = connection.responseCode
        logger.lifecycle("Sonatype Central response: ${responseCode} ${connection.responseMessage}")

        // Check if the request was successful. If not, fail the build.
        if (!(responseCode in 200..299)) {
            def errorStream = connection.errorStream?.text
            throw new GradleException("Failed to finalize publication on Sonatype Central. Response: ${responseCode}. Body: ${errorStream}")
        }

        logger.lifecycle('Successfully finalized publication on Sonatype Central.')
    }
}